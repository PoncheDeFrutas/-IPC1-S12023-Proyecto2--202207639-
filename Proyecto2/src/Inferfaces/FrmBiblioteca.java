package Inferfaces;

import Clases.Categorias;
import Clases.Imagen;
import Logica.LogicaUsuarios;
import java.awt.Image;
import java.io.File;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Josue
 */
public class FrmBiblioteca extends javax.swing.JFrame {

    public static String nombreUsuario = "";
    private static List<Categorias> categoriasUsuario;
    private static DefaultTableModel modelo;
    private static File fichero;
    private static String path;
    private static String categoria = "";

    /**
     * Creates new form FrmBiblioteca
     */
    public FrmBiblioteca(String usuario) {
        initComponents();
        this.nombreUsuario = usuario;
        lblUsuario.setText(usuario);
        this.setLocationRelativeTo(null);
        categoria = "";
        try {
            actualizarTabla();
            llenarCb();
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCategoria = new javax.swing.JLabel();
        btnAgregarCategoria = new javax.swing.JButton();
        btnEliminarCategoria = new javax.swing.JButton();
        btnAgregarImagen = new javax.swing.JButton();
        btnEliminarImagen = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblUsuario = new javax.swing.JLabel();
        btnSiguiente = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblImagen = new javax.swing.JLabel();
        cbImagenes = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbCategorias = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCategoria.setText("Categorias");

        btnAgregarCategoria.setText("Agregar  Categoria");
        btnAgregarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCategoriaActionPerformed(evt);
            }
        });

        btnEliminarCategoria.setText("Eliminar Categoria");
        btnEliminarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCategoriaActionPerformed(evt);
            }
        });

        btnAgregarImagen.setText("Agregar Imagen");
        btnAgregarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarImagenActionPerformed(evt);
            }
        });

        btnEliminarImagen.setText("Eliminar Imagen");
        btnEliminarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarImagenActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblUsuario.setText("Usuario");

        btnSiguiente.setText("Siguiente");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        btnAnterior.setText("Anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        cbImagenes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbImagenesItemStateChanged(evt);
            }
        });

        tbCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Categorias"
            }
        ));
        tbCategorias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbCategoriasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbCategorias);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCategoria)
                    .addComponent(btnAgregarCategoria))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblUsuario))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEliminarCategoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSiguiente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnterior)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAgregarImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblCategoria))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUsuario))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarCategoria)
                    .addComponent(btnEliminarCategoria)
                    .addComponent(btnSalir)
                    .addComponent(btnEliminarImagen)
                    .addComponent(btnAgregarImagen)
                    .addComponent(btnAnterior)
                    .addComponent(btnSiguiente))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void actualizarTabla() {
        modelo = (DefaultTableModel) tbCategorias.getModel();
        categoriasUsuario = LogicaUsuarios.categoriasUsuario(nombreUsuario);
        try {
            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.removeRow(i);
            }
        } catch (Exception e) {
        }
        Object[] ob = new Object[1];

        if (!categoriasUsuario.isEmpty()) {
            for (Categorias categorias : categoriasUsuario) {
                boolean repetidos = false;
                for (int i = 0; i < tbCategorias.getRowCount(); i++) {
                    if (modelo.getValueAt(i, 0).toString().equals(categorias.getNombreCategoria())) {
                        repetidos = true;
                        break;
                    }
                }
                if (!repetidos) {
                    ob[0] = categorias.getNombreCategoria();
                    modelo.addRow(ob);
                }
            }
        }
        tbCategorias.setModel(modelo);

    }

    public void llenarDibujo() {
        try {
            File FicheroAux = new File(path);
            if (FicheroAux.exists()) {
                ImageIcon imagen = new ImageIcon(FicheroAux.getPath());
                Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_DEFAULT));
                lblImagen.setIcon(icono);
            } else {
                lblImagen.setIcon(null);
            }
        } catch (Exception e) {
            // Manejo de errores
            lblImagen.setIcon(null);
        }
    }

    public void llenarCb() {
        cbImagenes.removeAllItems();
        Categorias categoriaaux = LogicaUsuarios.obtenerCategoria(nombreUsuario, tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString());
        List<Imagen> listaImagenesUsuario = categoriaaux.getList();
        try {
            if (!listaImagenesUsuario.isEmpty()) {
                for (int i = 0; i < listaImagenesUsuario.size(); i++) {
                    boolean repetido = false;
                    for (int j = 0; j < cbImagenes.getItemCount(); j++) {
                        if (listaImagenesUsuario.get(i).getNombre().equals(cbImagenes.getItemAt(j))) {
                            repetido = true;
                            break;
                        }
                    }
                    if (!repetido) {
                        cbImagenes.addItem(listaImagenesUsuario.get(i).getNombre());
                    }
                }
            }
        } catch (Exception e) {
            lblImagen.setIcon(null);
        }
    }

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        FrmPrincipal ventanaPrincipal = new FrmPrincipal();
        ventanaPrincipal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnAgregarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCategoriaActionPerformed
        // TODO add your handling code here:  
        String nombreCategoria = JOptionPane.showInputDialog(this, "Ingrese el nombre de la categoria");
        Categorias categoriaAuxiliar = new Categorias(nombreCategoria);
        if (LogicaUsuarios.agregarCategorias(nombreUsuario, categoriaAuxiliar)) {
            JOptionPane.showMessageDialog(this, "Se registro EXITOSAMENTE");
        } else {
            JOptionPane.showMessageDialog(this, "No se ingreso la categoria");
        }
        try {
            actualizarTabla();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnAgregarCategoriaActionPerformed

    private void btnEliminarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCategoriaActionPerformed
        // TODO add your handling code here:
        if (tbCategorias.getSelectedRow() > -1) {
            String categoria = tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString();
            if (LogicaUsuarios.eliminarCategorias(nombreUsuario, categoria)) {
                JOptionPane.showMessageDialog(this, "Se ELIMINO EXITOSAMENTE");
                try {
                    actualizarTabla();
                    lblImagen.setIcon(null);
                    cbImagenes.removeAllItems();
                    categoria = "";
                    
                } catch (Exception e) {
                }
            } else {
                JOptionPane.showMessageDialog(this, "NO SE ELIMINO");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione algun dato");
        }

    }//GEN-LAST:event_btnEliminarCategoriaActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        // TODO add your handling code here:
        try {
            if (cbImagenes.getItemCount() > -1) {
                if (cbImagenes.getSelectedIndex() < cbImagenes.getItemCount()) {
                    cbImagenes.setSelectedIndex(cbImagenes.getSelectedIndex() + 1);
                }
            }
        } catch (Exception e) {
            if (cbImagenes.getSelectedIndex() >= cbImagenes.getItemCount() - 1) {
                cbImagenes.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        // TODO add your handling code here:
        try {
            if (cbImagenes.getItemCount() > -1) {
                if (cbImagenes.getSelectedIndex() > 0) {
                    cbImagenes.setSelectedIndex(cbImagenes.getSelectedIndex() - 1);
                } else {
                    cbImagenes.setSelectedIndex(cbImagenes.getItemCount() - 1);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnAgregarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarImagenActionPerformed
        // TODO add your handling code here:
        if (tbCategorias.getSelectedRow() > -1) {
            Categorias categoriaAuxiliar = LogicaUsuarios.obtenerCategoria(nombreUsuario, tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString());
            try {
                JFileChooser escojerImagen = new JFileChooser();
                int eleccion = escojerImagen.showOpenDialog(this);
                if (eleccion == JFileChooser.APPROVE_OPTION) {
                    fichero = escojerImagen.getSelectedFile();
                }
            } catch (Exception e) {
            }
            try {
                Imagen imagenAuxiliar = new Imagen(fichero.getName(), fichero.getPath());
                categoriaAuxiliar.add(imagenAuxiliar);
                llenarCb();
                llenarDibujo();
            } catch (Exception e) {
            }

        } else {
            JOptionPane.showMessageDialog(this, "Seleccione algun dato");
        }

    }//GEN-LAST:event_btnAgregarImagenActionPerformed

    private void btnEliminarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarImagenActionPerformed
        // TODO add your handling code here:
        Categorias categoriaAuxiliar = LogicaUsuarios.obtenerCategoria(nombreUsuario, tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString());
        List<Imagen> listaImagenesUsuario = LogicaUsuarios.imagenesCategoria(nombreUsuario, tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString());
        String nombre = "";
        boolean encontrado = false;
        try {
            for (int i = 0; i < listaImagenesUsuario.size(); i++) {
                try {
                    if (listaImagenesUsuario.get(i).getNombre().equals(cbImagenes.getSelectedItem().toString())) {
                        encontrado = true;
                        path = listaImagenesUsuario.get(i).getRuta();
                        nombre = listaImagenesUsuario.get(i).getNombre();
                        categoriaAuxiliar.delete(listaImagenesUsuario.get(i));
                    }

                } catch (Exception e) {
                    llenarCb();
                }
                if (encontrado) {
                    break;
                } else {
                }
            }
            llenarCb();
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btnEliminarImagenActionPerformed

    private void tbCategoriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbCategoriasMouseClicked
        // TODO add your handling code here:
        if (categoria.equals(tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString())) {
            System.out.println("IGUALES NORMAL");
            if (cbImagenes.getItemCount() > 0) {
                System.out.println("SE REPINTA");
                llenarCb();
                llenarDibujo();
            } else {
                path = "";
                llenarCb();
                llenarDibujo();
                lblImagen.setIcon(null);
                System.out.println("VACIA");
            }
        } else {
            categoria = tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString();
            llenarCb();
            if (cbImagenes.getItemCount() > 0) {
                System.out.println(" aaaaaaSE REPINTA");
                llenarDibujo();
            } else {
                path = "";
                lblImagen.setIcon(null);
                System.out.println("aaaaaaaaVACIA");
            }
        }
    }//GEN-LAST:event_tbCategoriasMouseClicked

    private void cbImagenesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbImagenesItemStateChanged
        // TODO add your handling code here:
        List<Imagen> listaImagenesUsuario = LogicaUsuarios.imagenesCategoria(nombreUsuario, tbCategorias.getValueAt(tbCategorias.getSelectedRow(), 0).toString());
        boolean encontrado = false;
        try {
            for (int i = 0; i < listaImagenesUsuario.size(); i++) {
                try {
                    if (listaImagenesUsuario.get(i).getNombre().equals(cbImagenes.getSelectedItem().toString())) {
                        encontrado = true;
                        path = listaImagenesUsuario.get(i).getRuta();
                    }

                } catch (Exception e) {
                    llenarCb();
                }
                if (encontrado) {
                    break;
                } else {
                }
            }
        } catch (Exception e) {
            lblImagen.setIcon(null);
        }
        llenarDibujo();
    }//GEN-LAST:event_cbImagenesItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmBiblioteca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmBiblioteca(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCategoria;
    private javax.swing.JButton btnAgregarImagen;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnEliminarCategoria;
    private javax.swing.JButton btnEliminarImagen;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JComboBox<String> cbImagenes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTable tbCategorias;
    // End of variables declaration//GEN-END:variables
}
